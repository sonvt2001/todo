{"ast":null,"code":"import _toConsumableArray from\"D:/HCMUE/C\\xF4ng ngh\\u1EC7 Web/WebToDoList-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"D:/HCMUE/C\\xF4ng ngh\\u1EC7 Web/WebToDoList-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useRef,useEffect}from'react';import{DataContext}from'./Data';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function FormInput(){var _useContext=useContext(DataContext),_useContext2=_slicedToArray(_useContext,2),todos=_useContext2[0],setTodos=_useContext2[1];var _useState=useState(''),_useState2=_slicedToArray(_useState,2),todoName=_useState2[0],setTodoName=_useState2[1];// const [todoTime, setTodoTime] = useState( new Date());\nvar todoInput=useRef();var addTodo=function addTodo(e){e.preventDefault();var date=new Date();// const hoursValue = date.getHours()\n// const minutesValue = date.getMinutes()\nvar dayValue=date.getDate();var monthValue=date.getMonth()+1;var yearValue=date.getFullYear();// const styleHours = hoursValue >= 12 ? 'pm' : 'am'\nvar dateValue=\"Date: \"+dayValue+\"/\"+monthValue+\"/\"+yearValue;// console.log(dateValue) \nsetTodos([].concat(_toConsumableArray(todos),[{name:todoName,time:dateValue,complete:false}]));setTodoName('');todoInput.current.focus();};useEffect(function(){todoInput.current.focus();},[]);return/*#__PURE__*/_jsxs(\"form\",{autoComplete:\"off\",onSubmit:addTodo,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"todo\",id:\"todo\",ref:todoInput,required:true,placeholder:\"What do you want to do today...\",value:todoName,onChange:function onChange(e){return setTodoName(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submitCreate\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-plus\",\"aria-hidden\":\"true\"})})]});}","map":{"version":3,"sources":["D:/HCMUE/Công nghệ Web/WebToDoList-main/src/components/FormInput.js"],"names":["React","useState","useContext","useRef","useEffect","DataContext","FormInput","todos","setTodos","todoName","setTodoName","todoInput","addTodo","e","preventDefault","date","Date","dayValue","getDate","monthValue","getMonth","yearValue","getFullYear","dateValue","name","time","complete","current","focus","target","value"],"mappings":"4QAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,UAAzB,CAAqCC,MAArC,CAA6CC,SAA7C,KAA6D,OAA7D,CACA,OAAQC,WAAR,KAA0B,QAA1B,C,wFAEA,cAAe,SAASC,CAAAA,SAAT,EAAqB,CAClC,gBAA0BJ,UAAU,CAACG,WAAD,CAApC,4CAAOE,KAAP,iBAAcC,QAAd,iBACA,cAAgCP,QAAQ,CAAC,EAAD,CAAxC,wCAAOQ,QAAP,eAAiBC,WAAjB,eACA;AACA,GAAMC,CAAAA,SAAS,CAAGR,MAAM,EAAxB,CACA,GAAMS,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,CAAC,CAAG,CAClBA,CAAC,CAACC,cAAF,GACA,GAAMC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,EAAb,CACA;AACA;AACA,GAAMC,CAAAA,QAAQ,CAAGF,IAAI,CAACG,OAAL,EAAjB,CACA,GAAMC,CAAAA,UAAU,CAAGJ,IAAI,CAACK,QAAL,GAAkB,CAArC,CACA,GAAMC,CAAAA,SAAS,CAAGN,IAAI,CAACO,WAAL,EAAlB,CACA;AAEA,GAAMC,CAAAA,SAAS,CAAG,SAAWN,QAAX,CAAsB,GAAtB,CAA4BE,UAA5B,CAAyC,GAAzC,CAA+CE,SAAjE,CACA;AACAb,QAAQ,8BAAKD,KAAL,GAAW,CAACiB,IAAI,CAAEf,QAAP,CAAiBgB,IAAI,CAAEF,SAAvB,CAAmCG,QAAQ,CAAE,KAA7C,CAAX,GAAR,CACAhB,WAAW,CAAC,EAAD,CAAX,CACAC,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,GACD,CAfD,CAgBAxB,SAAS,CAAC,UAAK,CACbO,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,GACD,CAFQ,CAEP,EAFO,CAAT,CAIA,mBACE,cAAM,YAAY,CAAG,KAArB,CAA2B,QAAQ,CAAGhB,OAAtC,wBACI,cAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,EAAE,CAAC,MAAlC,CAAyC,GAAG,CAAED,SAA9C,CACA,QAAQ,KADR,CACS,WAAW,CAAC,iCADrB,CACuD,KAAK,CAAEF,QAD9D,CAEA,QAAQ,CAAG,kBAAAI,CAAC,QAAIH,CAAAA,WAAW,CAACG,CAAC,CAACgB,MAAF,CAASC,KAAV,CAAf,EAFZ,EADJ,cAKI,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,cAAhC,uBACE,UAAG,SAAS,CAAC,YAAb,CAA0B,cAAY,MAAtC,EADF,EALJ,GADF,CAYD","sourcesContent":["import React, {useState, useContext, useRef, useEffect} from 'react'\nimport {DataContext} from './Data'\n\nexport default function FormInput() {\n  const [todos, setTodos] = useContext(DataContext);\n  const [todoName, setTodoName] = useState('');\n  // const [todoTime, setTodoTime] = useState( new Date());\n  const todoInput = useRef();\n  const addTodo = e =>{\n    e.preventDefault();\n    const date = new Date()\n    // const hoursValue = date.getHours()\n    // const minutesValue = date.getMinutes()\n    const dayValue = date.getDate()\n    const monthValue = date.getMonth() + 1\n    const yearValue = date.getFullYear()\n    // const styleHours = hoursValue >= 12 ? 'pm' : 'am'\n\n    const dateValue = \"Date: \" + dayValue + \"/\" + monthValue + \"/\" + yearValue\n    // console.log(dateValue) \n    setTodos([...todos,{name: todoName, time: dateValue , complete: false}])\n    setTodoName('');\n    todoInput.current.focus();\n  }\n  useEffect(() =>{\n    todoInput.current.focus();\n  },[])\n\n  return (\n    <form autoComplete = \"off\" onSubmit ={addTodo}> \n        <input type=\"text\" name=\"todo\" id=\"todo\" ref={todoInput}\n        required placeholder=\"What do you want to do today...\" value={todoName} \n        onChange ={e => setTodoName(e.target.value)}/>\n        \n        <button type=\"submit\" className=\"submitCreate\">\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n        </button>\n      \n    </form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}